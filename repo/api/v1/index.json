{
  "api_version": "v1",
  "description": "3D Printer Configuration Repository API v1",
  "last_updated": "2025-06-11T21:52:00Z",
  "endpoints": {
    "repository_info": "/index.json",
    "slicers": "/api/v1/slicers.json",
    "search": "/api/v1/search.json",
    "browse_slicers": "/configs/",
    "browse_printer": "/configs/{slicer}/printers/",
    "browse_filaments": "/configs/{slicer}/filaments/",
    "browse_processes": "/configs/{slicer}/processes/"
  },
  "optional_endpoints": {
    "dependencies": "/api/v1/dependencies/{slicer}/{type}/{path}",
    "resolved_config": "/api/v1/resolved/{slicer}/{type}/{path}"
  },
  "api_patterns": {
    "printer_api": "/api/v1/printers/{manufacturer}/{model}.json",
    "filament_api": "/api/v1/filaments/{material}/{name}.json",
    "process_api": "/api/v1/processes/{category}/{name}.json"
  },
  "config_patterns": {
    "printer_config": "/configs/{slicer}/printers/{manufacturer}/{model}.json",
    "filament_config": "/configs/{slicer}/filaments/{material}/{name}.json",
    "process_config": "/configs/{slicer}/processes/{category}/{name}.json"
  },
  "supported_formats": ["json", "toml"],
  "metadata_schema": {
    "required_fields": [
      "name",
      "version", 
      "slicer",
      "type",
      "created",
      "updated",
      "author",
      "license"
    ],
    "optional_fields": [
      "description",
      "tags",
      "compatibility",
      "manufacturer",
      "model",
      "material",
      "category"
    ]
  },
  "query_parameters": {
    "format": "Response format (json, raw)",
    "slicer": "Filter by slicer type",
    "manufacturer": "Filter by manufacturer",
    "material": "Filter by material type",
    "tags": "Filter by tags (comma-separated)",
    "version": "Minimum version compatibility",
    "include_dependencies": "Include dependency tree in response (true/false)",
    "resolve_inheritance": "Resolve all inherited configurations (true/false)"
  },
  "optional_features": {
    "inheritance_system": {
      "description": "Optional: Configuration files can inherit from other configurations using the 'inherits' property",
      "status": "optional",
      "inheritance_chain": "Configurations can form inheritance chains (A inherits from B, B inherits from C, etc.)",
      "resolution_order": "Child configurations override parent configurations",
      "dependency_types": {
        "system": "Built-in base configurations provided by the slicer",
        "vendor": "Manufacturer-specific base configurations",
        "user": "User-created base configurations"
      },
      "supported_properties": {
        "inherits": "Optional: Name of the parent configuration to inherit from",
        "from": "Optional: Source type of the parent configuration (system, vendor, user)",
        "instantiation": "Optional: Whether this configuration can be instantiated directly (true/false)"
      }
    }
  }
}
